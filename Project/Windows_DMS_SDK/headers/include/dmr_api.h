/*
 * dmr_api.h
 * Copyright (C) 2009 ACCESS CO.,LTD.
 * All rights are reserved by ACCESS CO.,LTD.,
 * whether the whole or part of the source code
 * including any modifications is concerned.
 *
 * This is an unpublished source code of ACCESS CO.,LTD., and must be
 * treated as confidential material.  The above copyright notice does
 * not evidence any actual or intended publication of this source code.
 */

#ifndef NFLC_DMR_API_H
#define NFLC_DMR_API_H

#include <dlna_peer.h>
#include <nflc_drm_api.h>
#include <nflc_upnp_api.h>
#include <nflc_sxml.h>

#ifdef _DOXYGEN
#undef DLNA_API
#define DLNA_API
#endif

/* TDMRObjectResource specifies the Resource of the Object to be rendered */
struct _TDMRObjectResource
{
  slim_char* uri;
  slim_char* size;
  slim_char* duration;
  slim_char* protocolInfo;
  slim_char* resolution;
  slim_char* bitrate;
  slim_char* samplingFrequency;
  slim_char* bitsPerSample;
};
typedef struct _TDMRObjectResource TDMRObjectResource;

/*!
TDMR is a DMR library instance.

DMR applications must not access the TDMR instance.
*/

/**
 * @addtogroup datatypes
 */
/*@{*/

/* DMR types.  */
typedef void *TDMR;

/*@}*/

/**
 * @addtogroup enums
 */
/*@{*/

/* DMR return value.  */
/*!
\par Return Values: 
The return values for the DMR API are shown below.

<table>
	<tr>
		<td> \b Definition</td>
		<td> \b Meaning</td>
	</tr>
	<tr>
		<td>DMR_SUCCESS</td>
		<td>Succeeded (=0)</td>
	</tr>
	<tr>
		<td>DMR_INVALID_PARAM</td>
		<td>Invalid parameter</td>
	</tr>
	<tr>
		<td>DMR_INVALID_DESC</td>
		<td>Invalid description in DMR configuration XML file</td>
	</tr>
	<tr>
		<td>DMR_INVALID_INTERFACE</td>
		<td>Invalid interface index</td>
	</tr>
	<tr>
		<td>DMR_OUT_OF_MEMORY</td>
		<td>Insufficient memory</td>
	</tr>
	<tr>
		<td>DMR_SOCKET_ERROR</td>
		<td>Socket creation error</td>
	</tr>
	<tr>
		<td>DMR_INIT_FAILED</td>
		<td>Failed to read configuration file</td>
	</tr>
</table>
*/

enum {
  DMR_SUCCESS = UPNP_SUCCESS,
  DMR_INVALID_PARAM = UPNP_INVALID_PARAM,
  DMR_INVALID_DESC = UPNP_INVALID_DESC,
  DMR_INVALID_INTERFACE = UPNP_INVALID_INTERFACE,
  DMR_OUT_OF_MEMORY = UPNP_OUT_OF_MEMORY,
  DMR_SOCKET_ERROR = UPNP_SOCKET_ERROR,
  DMR_INIT_FAILED = UPNP_INIT_FAILED
};

/*@}*/

/**
 * @addtogroup datatypes
 */
/*@{*/

/*!
TDMRReturn is the return value type of the DMR API.

The DMR API uses the "3.2 Return Values" value as the processing result.
*/

typedef slim_int TDMRReturn;

/*@}*/

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/* Prototypes.  */

/**
 * @addtogroup apis
 */
/*@{*/

/* UI callback function type.  */
typedef slim_int (*TDMREventCallback) (TDMR top, void *in_param);

/*!
\par Function: 
Generates DMR instance. 
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>in_p</td>
		<td>DLNA progress manager descriptor</td>
	</tr>
	<tr>
		<td>[in]</td>
		<td>in_callback</td>
		<td>Specifies slim_nil</td>
	</tr>
	<tr>
		<td>[in]</td>
		<td>in_port</td>
		<td>DMR UPnP server port number</td>
	</tr>
	<tr>
		<td>[in]</td>
		<td>in_config_dir</td>
		<td>Directory path in which DMR configuration XML file is located</td>
	</tr>
	<tr>
		<td>[in]</td>
		<td>in_device_file</td>
		<td>Name of DMR device description file </td>
	</tr>
</table>

\return != slim_nil Succeeded (DMR instance)
\return == slim_nil Initialization failed 
\par Description: 
This function generates and initializes a DMR instance.

Specify the DLNA progress manager descriptor allocated by dlnaProgressAllocPeer() for in_p (see the description of dlnaProgressAllocPeer() in "NetFront Living Connect v2.0 Porting Guide").

Specify the path to the directory where the configuration XML files (device description file and service description file) used by the DMR are stored for in_config_dir.
\par Example: 
\code
/usr/local/share/dlna/xml 
\endcode 

Specify the filename of the device description file used by the DMR for in_device_file. (Example: dmr.xml).

dlnaDmrFree() is used to delete the DMR instance generated by this function.

This function does not allow multiple DMR instances to be generated.

This function must be called first among all the DMR APIs.
*/
/* API: Allocate DMR.  */
#ifdef ENABLE_AHL
DLNA_API TDMR 
dlnaDmrAlloc (dlna_progress in_p, dmr_ahl_callback in_callback, slim_opaque in_ahl_callback_arg, slim_half in_port,
              slim_char *in_config_dir, slim_char *in_device_file);
#else
DLNA_API TDMR 
dlnaDmrAlloc (dlna_progress in_p, TDMREventCallback in_callback, slim_half in_port,
              slim_char *in_config_dir, slim_char *in_device_file);
#endif /*ENABLE_AHL*/

/*!
\par Function: 
Deletes DMR instance. 
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>DMR instance</td>
	</tr>
</table>

\return DMR_SUCCESS Succeeded 
\par Description: 
This function deletes a DMR instance.

When the DMR library starts (after successful dlnaDmrStart()), dlnaDmrStop() must be called to stop the DMR library before calling this function.
*/
/* API: Free DMR.  */
DLNA_API TDMRReturn
dlnaDmrFree (TDMR self);

/*!
\par Function: 
Starts DMR library. 
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>DMR instance</td>
	</tr>
</table>
 
\return DMR_SUCCESS Succeeded
\return DMR_INVALID_PARAM Invalid parameter
\return DMR_INVALID_DESC Invalid description in DMR configuration XML file
\return DMR_OUT_OF_MEMORY Insufficient memory
\return DMR_INIT_FAILED Failed to read DMR configuration XML file 
\par Description: 
This function prepares the communication protocols (SSDP, GENA, SOAP) used by a DMR. After that, it registers an event to send an SSDP packet to notify every other device on the network that the DMR device itself is available.

Calling dlnaProgressStartPeer() after this function call starts operation of the DMR library (see the description of dlnaProgressStartPeer() in "NetFront Living Connect v2.0 Porting Guide").
*/
/* API: Start DMR.  */
DLNA_API TDMRReturn
dlnaDmrStart (TDMR self);

/*!
\par Function: 
Stops DMR library.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>DMR instance</td>
	</tr>
</table>

\return DMR_SUCCESS Succeeded 
\par Description: 
This function stops the communication protocols (SSDP, GENA, SOAP) used by a DMR.

Calling this function will send an SSDP byebye packet to notify all devices that the DMR is no longer available to the DLNA network.

If the DLNA progress was started by dlnaProgressStartPeer(), then the DLNA progress must be stopped by dlnaProgressStopPeer(), before calling this function (see the description of dlnaProgressStopPeer() in "NetFront Living Connect v2.0 Porting Guide").
*/
/* API: Stop DMR.  */
DLNA_API TDMRReturn
dlnaDmrStop (TDMR self);

/*@}*/

  /* C.K.20111109: Metadata information of DLNA object from DMS.  */
  /* Suppose there will be only one object in DMR, no object pointer required */

/**
 * @addtogroup apis
 */
/*@{*/

/*!
\par Function:
Gets property value by name.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to device, container, or item information for which to get 		property value
		</td>
	</tr>
	<tr>
		<td>[in]</td>
		<td>prop</td>
		<td>Property name</td>
	</tr>
</table>

\return URI (string) Property value
\return Null Specified object has no property value
\par Description:
This function returns the property value of the name specified for prop.
*/
DLNA_API slim_char *
dlnaDmrObjectPropGet (TDMR self, slim_char* in_prop);

/*@}*/

/**
 * @addtogroup macros
 */
/*@{*/

/*!
\par Function:
Gets title property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to device, container, or item information for which to get property value
		</td>
	</tr>
</table>

\return URI (string) title property value
\return Null Specified object has no property value
\par Description:
This function returns the title property.
*/

#define dlnaDmrObjectPropTitle(self)  		dlnaDmrObjectPropGet (self, SLIM_T("dc:title"))

/*!
\par Function:
Gets creator property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to device, container, or item information for which to get property value
		</td>
	</tr>
</table>

\return URI (string) creator property value
\return Null Specified object has no property value
\par Description:
This function returns the creator property.
*/

#define dlnaDmrObjectPropCreator(self) 	       dlnaDmrObjectPropGet (self, SLIM_T("dc:creator"))

/*!
\par Function:
Gets write status property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to device, container, or item information for which to get property value
		</td>
	</tr>
</table>

\return URI (string) write status property value
\return Null Specified object has no property value
\par Description:
This function returns the write status property.
*/

#define dlnaDmrObjectPropWriteStatus(self)   dlnaDmrObjectPropGet (self, SLIM_T("upnp:writeStatus"))

/*!
\par Function:
Gets detailed description property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to device, container, or item information for which to get property value
		</td>
	</tr>
</table>

\return  URI (string) detailed description property value
\return Null Specified object has no property value
\par Description:
This function returns the detailed description property.
*/

#define dlnaDmrObjectPropLongDescription(self)     dlnaDmrObjectPropGet (self, SLIM_T("upnp:longDescription"))

/*!
\par Function:
Gets description property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to device, container, or item information for which to get property value
		</td>
	</tr>
</table>

\return  URI (string) description property value
\return Null Specified object has no property value
\par Description:
This function returns the description property.
*/

#define dlnaDmrObjectPropDescription(self) 	dlnaDmrObjectPropGet (self, SLIM_T("upnp:description"))

/*!
\par Function:
Gets publisher property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to device, container, or item information for which to get property value
		</td>
	</tr>
</table>

\return URI (string) publisher property value
\return Null Specified object has no property value
\par Description:
This function returns the publisher property.
*/

#define dlnaDmrObjectPropPublisher(self) 	dlnaDmrObjectPropGet (self, SLIM_T("dc:publisher"))

/*!
\par Function:
Gets contributor property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to device, container, or item information for which to get property value
		</td>
	</tr>
</table>

\return URI (string) contributor property value
\return Null Specified object has no property value
\par Description:
This function returns the contributor property.
*/

#define dlnaDmrObjectPropContributor(self) 	dlnaDmrObjectPropGet (self, SLIM_T("dc:contributor"))

/*!
\par Function:
Gets date property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to device, container, or item information for which to get property value
		</td>
	</tr>
</table>

\return URI (string) date property value

Supported formats are as follows:

\verbatim
CCYY-MM-DD
CCYY-MM-DDThh:mm:ss
CCYY-MM-DDThh:mm:ssZ
CCYY-MM-DDThh:mm:ss+hh:mm
CCYY-MM-DDThh:mm:ss-hh:mm
CCYY-MM-DDThh:mm:ss.sss
CCYY-MM-DDThh:mm:ss.sssZ
CCYY-MM-DDThh:mm:ss.sss+hh:mm
CCYY-MM-DDThh:mm:ss.sss-hh:mm
\endverbatim

\return Null Specified object has no property value
\par Description:
This function returns the date property.
*/

#define dlnaDmrObjectPropDate(self) 		dlnaDmrObjectPropGet (self, SLIM_T("dc:date"))

/*!
\par Function:
Gets copyrights property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to device, container, or item information for which to get property value
		</td>
	</tr>
</table>

\return URI (string) copyrights property value
\return Null Specified object has no property value
\par Description:
This function returns the copyrights property.
*/

#define dlnaDmrObjectPropCopyrights(self)	dlnaDmrObjectPropGet (self, SLIM_T("dc:rights"))

/*!
\par Function:
Gets artist property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to device, container, or item information for which to get property value
		</td>
	</tr>
</table>

\return URI (string) artist property value
\return Null Specified object has no property value
\par Description:
This function returns the artist property.
*/

#define dlnaDmrObjectPropArtist(self) 		dlnaDmrObjectPropGet (self, SLIM_T("upnp:artist"))

/*!
\par Function:
Gets album property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to device, container, or item information for which to get property value
		</td>
	</tr>
</table>

\return URI (string) album property value
\return Null Specified object has no property value
\par Description:
This function returns the album property.
*/

#define dlnaDmrObjectPropAlbum(self) 		dlnaDmrObjectPropGet (self, SLIM_T("upnp:album"))

/*!
\par Function:
Gets genre property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to device, container, or item information for which to get property value
		</td>
	</tr>
</table>

\return URI (string) genre property value
\return Null Specified object has no property value
\par Description:
This function returns the genre property.
*/

#define dlnaDmrObjectPropGenre(self) 		dlnaDmrObjectPropGet (self, SLIM_T("upnp:genre"))

/*!
\par Function:
Gets producer property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to device, container, or item information for which to get property value
		</td>
	</tr>
</table>

\return URI (string) producer property value
\return Null Specified object has no property value
\par Description:
This function returns the producer property.
*/

#define dlnaDmrObjectPropProducer(self) 	dlnaDmrObjectPropGet (self, SLIM_T("upnp:producer"))

/*!
\par Function:
Gets album art URI property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to device, container, or item information for which to get property value
		</td>
	</tr>
</table>

\return URI (string) album art URI property value
\return Null Specified object has no property value
\par Description:
This function returns the album art URI property.
*/

#define dlnaDmrObjectPropAlbumArtURI(self)	dlnaDmrObjectPropGet (self, SLIM_T("upnp:albumArtURI"))

/*!
\par Function:
Gets language property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to device, container, or item information for which to get property value
		</td>
	</tr>
</table>

\return URI (string) language property value
\return Null Specified object has no property value
\par Description:
This function returns the language property.
*/

#define dlnaDmrObjectPropLanguage(self) 	dlnaDmrObjectPropGet (self, SLIM_T("dc:language"))

/*!
\par Function:
Gets actor property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to device, container, or item information for which to get property value
		</td>
	</tr>
</table>

\return URI (string) actor property value
\return Null Specified object has no property value
\par Description:
This function returns the actor property.
*/

#define dlnaDmrObjectPropActor(self) 		dlnaDmrObjectPropGet (self, SLIM_T("upnp:actor"))

/*@}*/

/**
 * @addtogroup apis
 */
/*@{*/

/*!
\par Function:
Gets resource URI property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>Pointer to item information for which to get property value</td>
	</tr>
</table>

\return URI (string) resource URI property value
\return Null Specified object has no property value
\par Description:
This function returns the resource URI property.
*/
DLNA_API slim_char *
dlnaDmrObjectPropResURI (TDMR self);

/*!
\par Function:
Gets resource size property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>Pointer to item information for which to get property value</td>
	</tr>
</table>

\return URI (string) resource size property value
\return Null Specified object has no property value
\par Description:
This function returns the resource size property.
*/
DLNA_API slim_char *
dlnaDmrObjectPropResSize (TDMR self);

/*!
\par Function:
Gets resource duration property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>Pointer to item information for which to get property value</td>
	</tr>
</table>

\return URI (string) resource duration property value
\return Null Specified object has no property value
\par Description:
This function returns the resource duration property.
*/
DLNA_API slim_char *
dlnaDmrObjectPropResDuration (TDMR self);

/*!
\par Function:
Gets resource resolution property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to item information for which to get property value
		</td>
	</tr>
</table>
 
\return URI (string) resource resolution property value
\return Null Specified object has no property value
\par Description:
This function returns the resource resolution property.
*/
DLNA_API slim_char *
dlnaDmrObjectPropResResolution (TDMR self);

/*!
\par Function:
Gets resource bitrate property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to item information for which to get property value
		</td>
	</tr>
</table>
 
\return URI (string) resource bitrate property value
\return Null Specified object has no property value
\par Description:
This function returns the resource bitrate property.
*/
DLNA_API slim_char *
dlnaDmrObjectPropResBitrate (TDMR self);

/*!
\par Function:
Gets resource sample frequency property.
\par Parameters:

<table>	
	<tr>
		<td>[in]</td>
		<td>self</td>
		<td>
			Pointer to item information for which to get property value
		</td>
	</tr>
</table>
 
\return URI (string) resource sampleFrequency property value
\return Null Specified object has no property value
\par Description:
This function returns the resource sampleFrequency property.
*/
DLNA_API slim_char *
dlnaDmrObjectPropResSampleFrequency (TDMR self);


TDMRReturn
dlnaDmrObjectResourceGet (TDMR self, TDMRObjectResource *outResource);

/*@}*/

/**
 * @addtogroup apis
 */
/*@{*/

/*!
\par Function:
Function sets friendly name on DMR device.
\par Parameters:
<table>
  <tr>
    <td>[in]</td>
    <td>self</td>
    <td>DMR instance</td>
  </tr>
  <tr>
    <td>[in]</td>
    <td>in_home_path</td>
    <td>New friendly name to set</td>
  </tr>
</table>

\return DMR_SUCCESS Succeeded
\return DMR_INVALID_PARAM Invalid argument(s) specified
\par Description:
Function sets friendly name on DMR device.
*/

DLNA_API slim_int
dlnaDmrSetFriendlyName (TDMR self, slim_char *in_friendly_name);

/*!
\par Function:
Function gets friendly name of device.
\par Parameters:
<table>
  <tr>
    <td>[in]</td>
    <td>self</td>
    <td>DMR instance</td>
  </tr>
</table>

\return pointer to string containing device friendly name
\return slim_nil if failed
\par Description:
Function gets friendly name of device specified by self.
*/

DLNA_API slim_char *
dlnaDmrGetFriendlyName (TDMR self);

/*@}*/

TDMRReturn
dlnaDmrServerStartAdvertisement(TDMR self);

TDMRReturn
dlnaDmrServerStopAdvertisement(TDMR self);

sXML*
dlnaDmrGetContentMetaData(TDMR self);

void
#ifdef ENABLE_AHL
dlnaDmrNotifyVolumeState(TDMR self, slim_int channel, slim_int volume, slim_int volumeDB);
#else /* ENABLE_AHL */
dlnaDmrNotifyVolumeState(TDMR self, slim_int channel, slim_int volume);
#endif /* ENABLE_AHL */

void
dlnaDmrNotifyMuteState(TDMR self, slim_int channel, slim_int state);

void
dlnaDmrNotifyPlayState(TDMR self, slim_int in_event);
    
DLNA_API slim_int dlnaDmrObjectPropResDurationInt (TDMR self);

#ifdef ENABLE_AHL
void
dmr_set_content_info(TDMR self, slim_char *in_content_info);

void
dmr_free_player_info(TDMR self);

void
dmr_set_current_play_position(TDMR self, slim_int in_time, slim_int in_byte);

slim_int
dlnaDmrSetPlayerInfo(TDMR self, slim_char *in_info);

slim_int
dlnaDmrSetPlayPosition(TDMR self, slim_int in_time, slim_int in_byte);

void
dmr_set_player_errcode(TDMR self, slim_char *in_error_info);
#endif /* ENABLE_AHL */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* NFLC_DMS_API_H */
